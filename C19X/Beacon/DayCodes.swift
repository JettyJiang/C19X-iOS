//
//  Codes.swift
//  C19X
//
//  Created by Freddy Choi on 23/03/2020.
//  Copyright Â© 2020 C19X. All rights reserved.
//

import Foundation
import CryptoKit
import os

/**
 Day codes are derived from a shared secret that has been agreed with the central server on registration.
 Given a shared secret, a sequence of forward secure day codes is created by recursively hashing (SHA)
 the hash of the shared secret, and using the hashes in reverse order; a day code is generated by taking
 the first eight bytes of a hash as a long value code. It is cryptographically challenging to predict the next
 code given the previous codes. Each day is allocated a day code up to a finite number of days for simplicity.
 */
protocol DayCodes {
    func day() -> Day?
    func get() -> DayCode?
    func seed() -> (BeaconCodeSeed, Day)?
}

typealias SharedSecret = Data
typealias DayCode = Int64
typealias Day = UInt
typealias BeaconCodeSeed = Int64

class ConcreteDayCodes : DayCodes {
    private let log = OSLog(subsystem: "org.c19x.beacon", category: "DayCodes")
    private let epoch = UInt64(ISO8601DateFormatter().date(from: "2020-01-01T00:00:00+0000")!.timeIntervalSince1970)
    private var values:[DayCode]
    
    init(_ sharedSecret: SharedSecret) {
        let days = 365 * 5
        values = ConcreteDayCodes.dayCodes(sharedSecret, days: days)
    }
    
    static func dayCodes(_ sharedSecret: SharedSecret, days: Int) -> [DayCode] {
        var hash = SHA.hash(data: sharedSecret)
        var values = [DayCode](repeating: 0, count: days)
        for i in (0 ... (days - 1)).reversed() {
            values[i] = SHA.javaLongValue(digest: hash)
            let hashData = Data(hash)
            hash = SHA.hash(data: hashData)
        }
        return values
    }
    
    static func beaconCodeSeed(_ dayCode: DayCode) -> BeaconCodeSeed {
        let data = withUnsafeBytes(of: dayCode) { Data($0) }
        let reversed: [UInt8] = [data[0], data[1], data[2], data[3], data[4], data[5], data[6], data[7]]
        let hash = SHA.hash(data: Data(reversed))
        let seed = BeaconCodeSeed(SHA.javaLongValue(digest: hash))
        return seed
    }
    
    func day() -> Day? {
        let now = UInt64(NSDate().timeIntervalSince1970)
        let (today,_) = (now - epoch).dividedReportingOverflow(by: UInt64(24 * 60 * 60))
        let day = Day(today)
        guard day >= 0, day < values.count else {
            os_log("Day out of range", log: log, type: .fault)
            return nil
        }
        return day
    }
    
    func get() -> DayCode? {
        guard let day = day() else {
            os_log("Day out of range", log: log, type: .fault)
            return nil
        }
        return values[Int(day)]
    }
    
    func seed() -> (BeaconCodeSeed, Day)? {
        guard let day = day(), let dayCode = get() else {
            os_log("Day out of range", log: log, type: .fault)
            return nil
        }
        let seed = ConcreteDayCodes.beaconCodeSeed(dayCode)
        return (seed, day)
    }
}
